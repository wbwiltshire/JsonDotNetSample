//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Data.EntityClient;
using System.Linq;
using EFDatabaseFirst.Data.POCOEntities;
using EFDatabaseFirst.Data.Model.Interfaces;
using EFDatabaseFirst.Data.POCOState;

namespace EFDatabaseFirst.Data.Model
{
    public partial class JsonTestContext : ObjectContext, IContext
    {
    	public const string ConnectionString = "name=JsonTestContext";
    	public const string ContainerName = "JsonTestContext";
    
    	#region Constructors
    
    	public JsonTestContext()
    		: base(ConnectionString, ContainerName)
    	{
    		this.ContextOptions.LazyLoadingEnabled = true;
    		MyContextOptions = this.ContextOptions;
    		Initialize();
    	}
    
    	public JsonTestContext(string connectionString)
    		: base(connectionString, ContainerName)
    	{
    		this.ContextOptions.LazyLoadingEnabled = true;
    		MyContextOptions = this.ContextOptions;
    		Initialize();
    	}
    
    	public JsonTestContext(EntityConnection connection)
    		: base(connection, ContainerName)
    	{
    		this.ContextOptions.LazyLoadingEnabled = true;
    		MyContextOptions = this.ContextOptions;
    		Initialize();
    	}
    
    	public ObjectContextOptions MyContextOptions { get; set; }
    
    	#endregion
    	  #region Partial Methods
    	
    		partial void Initialize();
    	
    		#endregion
    
        #region ObjectSet Properties
    
    	public IObjectSet<Boat> Boats
    	{
    		get { return _boats  ?? (_boats = CreateObjectSet<Boat>("Boats")); }
    	}
    	private IObjectSet<Boat> _boats;
    
    	public IObjectSet<City> Cities
    	{
    		get { return _cities  ?? (_cities = CreateObjectSet<City>("Cities")); }
    	}
    	private IObjectSet<City> _cities;
    
    	public IObjectSet<CloudCondition> CloudConditions
    	{
    		get { return _cloudConditions  ?? (_cloudConditions = CreateObjectSet<CloudCondition>("CloudConditions")); }
    	}
    	private IObjectSet<CloudCondition> _cloudConditions;
    
    	public IObjectSet<Country> Countries
    	{
    		get { return _countries  ?? (_countries = CreateObjectSet<Country>("Countries")); }
    	}
    	private IObjectSet<Country> _countries;
    
    	public IObjectSet<Direction> Directions
    	{
    		get { return _directions  ?? (_directions = CreateObjectSet<Direction>("Directions")); }
    	}
    	private IObjectSet<Direction> _directions;
    
    	public IObjectSet<Location> Locations
    	{
    		get { return _locations  ?? (_locations = CreateObjectSet<Location>("Locations")); }
    	}
    	private IObjectSet<Location> _locations;
    
    	public IObjectSet<Manufacturer> Manufacturers
    	{
    		get { return _manufacturers  ?? (_manufacturers = CreateObjectSet<Manufacturer>("Manufacturers")); }
    	}
    	private IObjectSet<Manufacturer> _manufacturers;
    
    	public IObjectSet<SeaCondition> SeaConditions
    	{
    		get { return _seaConditions  ?? (_seaConditions = CreateObjectSet<SeaCondition>("SeaConditions")); }
    	}
    	private IObjectSet<SeaCondition> _seaConditions;
    
    	public IObjectSet<State> States
    	{
    		get { return _states  ?? (_states = CreateObjectSet<State>("States")); }
    	}
    	private IObjectSet<State> _states;
    
    	public IObjectSet<Trip> Trips
    	{
    		get { return _trips  ?? (_trips = CreateObjectSet<Trip>("Trips")); }
    	}
    	private IObjectSet<Trip> _trips;
    
    	public IObjectSet<TripLog> TripLogs
    	{
    		get { return _tripLogs  ?? (_tripLogs = CreateObjectSet<TripLog>("TripLogs")); }
    	}
    	private IObjectSet<TripLog> _tripLogs;

        #endregion
    
    	#region IContext Members
    
    	public int Save()
    	{
    		return SaveChanges();
    	}
    	
    	public IEnumerable<T> ManagedEntities<T>()
    	{
    		var oses = ObjectStateManager.GetObjectStateEntries();
    		return oses.Where(entry => entry.Entity is T).Select(entry => (T)entry.Entity);
    	}
    	
    	public void ChangeState<T>(ObjectState state, T entity) where T : class
    	{
    	  ObjectStateManager.ChangeObjectState(entity, StateHelpers.GetEquivalentEntityState(state));
    	}
    	#endregion
    	
    } //End of class
} //End of namespace
