//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using EFDatabaseFirst.Data.POCOState;

namespace EFDatabaseFirst.Data.POCOEntities
{
    [MetadataType(typeof(CloudConditionMetaData))]
    public partial class CloudCondition : StateObject
    {
        #region Primitive Properties
    
    	public int Id
    	{
    		get;
    		set;
    	}
    
    	public string Name
    	{
    		get;
    		set;
    	}

        #endregion
        #region Navigation Properties
    
    	public ICollection<TripLog> TripLogs
    	{
    		get
    		{
    			if (_tripLogs == null)
    			{
    				var newCollection = new FixupCollection<TripLog>();
    				newCollection.CollectionChanged += FixupTripLogs;
    				_tripLogs = newCollection;
    			}
    			return _tripLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_tripLogs, value))
    			{
    				var previousValue = _tripLogs as FixupCollection<TripLog>;
    				if (previousValue != null)
    				{
    					previousValue.CollectionChanged -= FixupTripLogs;
    				}
    				_tripLogs = value;
    				var newValue = value as FixupCollection<TripLog>;
    				if (newValue != null)
    				{
    					newValue.CollectionChanged += FixupTripLogs;
    				}
    			}
    		}
    	}
    	private ICollection<TripLog> _tripLogs;

        #endregion
        #region Association Fixup
    
    	private void FixupTripLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (e.NewItems != null)
    		{
    			foreach (TripLog item in e.NewItems)
    			{
    				item.CloudCondition = this;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TripLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.CloudCondition, this))
    				{
    					item.CloudCondition = null;
    				}
    			}
    		}
    	}

        #endregion
    }
}
