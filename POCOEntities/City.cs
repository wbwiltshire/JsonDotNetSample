//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using EFDatabaseFirst.Data.POCOState;

namespace EFDatabaseFirst.Data.POCOEntities
{
    [MetadataType(typeof(CityMetaData))]
    public partial class City : StateObject
    {
        #region Primitive Properties
    
    	public int Id
    	{
    		get;
    		set;
    	}
    
    	public int StateId
    	{
    		get { return _stateId; }
    		set
    		{
    			if (_stateId != value)
    			{
    				if (State != null && State.Id != value)
    				{
    					State = null;
    				}
    				_stateId = value;
    			}
    		}
    	}
    	private int _stateId;
    
    	public string Name
    	{
    		get;
    		set;
    	}

        #endregion
        #region Navigation Properties
    
    	public State State
    	{
    		get { return _state; }
    		set
    		{
    			if (!ReferenceEquals(_state, value))
    			{
    				var previousValue = _state;
    				_state = value;
    				FixupState(previousValue);
    			}
    		}
    	}
    	private State _state;
    
    	public ICollection<Location> Locations
    	{
    		get
    		{
    			if (_locations == null)
    			{
    				var newCollection = new FixupCollection<Location>();
    				newCollection.CollectionChanged += FixupLocations;
    				_locations = newCollection;
    			}
    			return _locations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_locations, value))
    			{
    				var previousValue = _locations as FixupCollection<Location>;
    				if (previousValue != null)
    				{
    					previousValue.CollectionChanged -= FixupLocations;
    				}
    				_locations = value;
    				var newValue = value as FixupCollection<Location>;
    				if (newValue != null)
    				{
    					newValue.CollectionChanged += FixupLocations;
    				}
    			}
    		}
    	}
    	private ICollection<Location> _locations;

        #endregion
        #region Association Fixup
    
    	private void FixupState(State previousValue)
    	{
    		if (previousValue != null && previousValue.Cities.Contains(this))
    		{
    			previousValue.Cities.Remove(this);
    		}
    
    		if (State != null)
    		{
    			if (!State.Cities.Contains(this))
    			{
    				State.Cities.Add(this);
    			}
    			if (StateId != State.Id)
    			{
    				StateId = State.Id;
    			}
    		}
    	}
    
    	private void FixupLocations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (e.NewItems != null)
    		{
    			foreach (Location item in e.NewItems)
    			{
    				item.City = this;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Location item in e.OldItems)
    			{
    				if (ReferenceEquals(item.City, this))
    				{
    					item.City = null;
    				}
    			}
    		}
    	}

        #endregion
    }
}
