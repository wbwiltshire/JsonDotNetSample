//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using EFDatabaseFirst.Data.POCOState;

namespace EFDatabaseFirst.Data.POCOEntities
{
    [MetadataType(typeof(TripLogMetaData))]
    public partial class TripLog : StateObject
    {
        #region Primitive Properties
    
    	public int Id
    	{
    		get;
    		set;
    	}
    
    	public int TripId
    	{
    		get { return _tripId; }
    		set
    		{
    			if (_tripId != value)
    			{
    				if (Trip != null && Trip.Id != value)
    				{
    					Trip = null;
    				}
    				_tripId = value;
    			}
    		}
    	}
    	private int _tripId;
    
    	public System.DateTime LogDt
    	{
    		get;
    		set;
    	}
    
    	public decimal Latitude
    	{
    		get;
    		set;
    	}
    
    	public decimal Longitude
    	{
    		get;
    		set;
    	}
    
    	public decimal BoatSpeed
    	{
    		get;
    		set;
    	}
    
    	public int Course
    	{
    		get;
    		set;
    	}
    
    	public int Pressure
    	{
    		get;
    		set;
    	}
    
    	public int PressureDirId
    	{
    		get;
    		set;
    	}
    
    	public decimal WindSpeed
    	{
    		get;
    		set;
    	}
    
    	public int WindDirId
    	{
    		get { return _windDirId; }
    		set
    		{
    			if (_windDirId != value)
    			{
    				if (Direction != null && Direction.Id != value)
    				{
    					Direction = null;
    				}
    				_windDirId = value;
    			}
    		}
    	}
    	private int _windDirId;
    
    	public int SeaStateId
    	{
    		get { return _seaStateId; }
    		set
    		{
    			if (_seaStateId != value)
    			{
    				if (SeaCondition != null && SeaCondition.Id != value)
    				{
    					SeaCondition = null;
    				}
    				_seaStateId = value;
    			}
    		}
    	}
    	private int _seaStateId;
    
    	public int CloudCoverId
    	{
    		get { return _cloudCoverId; }
    		set
    		{
    			if (_cloudCoverId != value)
    			{
    				if (CloudCondition != null && CloudCondition.Id != value)
    				{
    					CloudCondition = null;
    				}
    				_cloudCoverId = value;
    			}
    		}
    	}
    	private int _cloudCoverId;
    
    	public string Comments
    	{
    		get;
    		set;
    	}
    
    	public bool Active
    	{
    		get;
    		set;
    	}
    
    	public System.DateTime ModifiedDt
    	{
    		get;
    		set;
    	}
    
    	public System.DateTime CreateDt
    	{
    		get;
    		set;
    	}

        #endregion
        #region Navigation Properties
    
    	public CloudCondition CloudCondition
    	{
    		get { return _cloudCondition; }
    		set
    		{
    			if (!ReferenceEquals(_cloudCondition, value))
    			{
    				var previousValue = _cloudCondition;
    				_cloudCondition = value;
    				FixupCloudCondition(previousValue);
    			}
    		}
    	}
    	private CloudCondition _cloudCondition;
    
    	public Direction Direction
    	{
    		get { return _direction; }
    		set
    		{
    			if (!ReferenceEquals(_direction, value))
    			{
    				var previousValue = _direction;
    				_direction = value;
    				FixupDirection(previousValue);
    			}
    		}
    	}
    	private Direction _direction;
    
    	public SeaCondition SeaCondition
    	{
    		get { return _seaCondition; }
    		set
    		{
    			if (!ReferenceEquals(_seaCondition, value))
    			{
    				var previousValue = _seaCondition;
    				_seaCondition = value;
    				FixupSeaCondition(previousValue);
    			}
    		}
    	}
    	private SeaCondition _seaCondition;
    
    	public Trip Trip
    	{
    		get { return _trip; }
    		set
    		{
    			if (!ReferenceEquals(_trip, value))
    			{
    				var previousValue = _trip;
    				_trip = value;
    				FixupTrip(previousValue);
    			}
    		}
    	}
    	private Trip _trip;

        #endregion
        #region Association Fixup
    
    	private void FixupCloudCondition(CloudCondition previousValue)
    	{
    		if (previousValue != null && previousValue.TripLogs.Contains(this))
    		{
    			previousValue.TripLogs.Remove(this);
    		}
    
    		if (CloudCondition != null)
    		{
    			if (!CloudCondition.TripLogs.Contains(this))
    			{
    				CloudCondition.TripLogs.Add(this);
    			}
    			if (CloudCoverId != CloudCondition.Id)
    			{
    				CloudCoverId = CloudCondition.Id;
    			}
    		}
    	}
    
    	private void FixupDirection(Direction previousValue)
    	{
    		if (previousValue != null && previousValue.TripLogs.Contains(this))
    		{
    			previousValue.TripLogs.Remove(this);
    		}
    
    		if (Direction != null)
    		{
    			if (!Direction.TripLogs.Contains(this))
    			{
    				Direction.TripLogs.Add(this);
    			}
    			if (WindDirId != Direction.Id)
    			{
    				WindDirId = Direction.Id;
    			}
    		}
    	}
    
    	private void FixupSeaCondition(SeaCondition previousValue)
    	{
    		if (previousValue != null && previousValue.TripLogs.Contains(this))
    		{
    			previousValue.TripLogs.Remove(this);
    		}
    
    		if (SeaCondition != null)
    		{
    			if (!SeaCondition.TripLogs.Contains(this))
    			{
    				SeaCondition.TripLogs.Add(this);
    			}
    			if (SeaStateId != SeaCondition.Id)
    			{
    				SeaStateId = SeaCondition.Id;
    			}
    		}
    	}
    
    	private void FixupTrip(Trip previousValue)
    	{
    		if (previousValue != null && previousValue.TripLogs.Contains(this))
    		{
    			previousValue.TripLogs.Remove(this);
    		}
    
    		if (Trip != null)
    		{
    			if (!Trip.TripLogs.Contains(this))
    			{
    				Trip.TripLogs.Add(this);
    			}
    			if (TripId != Trip.Id)
    			{
    				TripId = Trip.Id;
    			}
    		}
    	}

        #endregion
    }
}
